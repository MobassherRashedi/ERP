// <auto-generated />
using System;
using DevSkill.Inventory.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevSkill.Inventory.Web.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    partial class InventoryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasDiscriminator<int>("CategoryType").HasValue(17);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicableCategoryIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicableProductIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("FixedAmountDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MinimumPurchaseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PercentageDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.Property<int>("UsageLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("FixedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MinimumPurchaseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.MeasurementUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnitSymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MeasurementUnits");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.POSProduct", b =>
                {
                    b.Property<Guid>("POSTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("POSTransactionId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("POSProduct");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.POSTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ChangeGiven")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("POSTransactions");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BarcodeSymbology")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MeasurementUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.ProductSupplier", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("MinimumOrderQuantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("SupplierId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("SupplierPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("SupplierId1");

                    b.ToTable("ProductSuppliers");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.ProductTag", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.PurchaseProduct", b =>
                {
                    b.Property<Guid>("PurchaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PurchaseId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("PurchaseProduct");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.PurchaseReturn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseReturn");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.PurchaseReturnProduct", b =>
                {
                    b.Property<Guid>("PurchaseReturnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityReturned")
                        .HasColumnType("int");

                    b.Property<string>("ReturnReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PurchaseReturnId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("PurchaseReturnProduct");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.SaleProduct", b =>
                {
                    b.Property<Guid>("SaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SaleId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("SaleProduct");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.SalesReturn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.ToTable("SalesReturn");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.SalesReturnProduct", b =>
                {
                    b.Property<Guid>("SalesReturnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityReturned")
                        .HasColumnType("int");

                    b.Property<string>("ReturnReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalesReturnId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("SalesReturnProduct");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.StockAdjustment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AdjustmentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityAdjusted")
                        .HasColumnType("int");

                    b.Property<int>("Reason")
                        .HasColumnType("int");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("StockAdjustments");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.StockTransfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FromWarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToWarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FromWarehouseId");

                    b.HasIndex("ToWarehouseId");

                    b.ToTable("StockTransfers");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.StockTransferProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StockTransferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "StockTransferId");

                    b.HasIndex("StockTransferId");

                    b.ToTable("StockTransferProducts");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Tax", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.WarehouseProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LowStockThreshold")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "WarehouseId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseProducts");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Automotive", b =>
                {
                    b.HasBaseType("DevSkill.Inventory.Domain.Entities.Category");

                    b.Property<string>("EngineType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleType")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Beauty", b =>
                {
                    b.HasBaseType("DevSkill.Inventory.Domain.Entities.Category");

                    b.Property<string>("ExpirationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkinType")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Books", b =>
                {
                    b.HasBaseType("DevSkill.Inventory.Domain.Entities.Category");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Edition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(8);
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Clothing", b =>
                {
                    b.HasBaseType("DevSkill.Inventory.Domain.Entities.Category");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FabricType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Crafts", b =>
                {
                    b.HasBaseType("DevSkill.Inventory.Domain.Entities.Category");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsageInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Categories", t =>
                        {
                            t.Property("Color")
                                .HasColumnName("Crafts_Color");
                        });

                    b.HasDiscriminator().HasValue(14);
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Electronics", b =>
                {
                    b.HasBaseType("DevSkill.Inventory.Domain.Entities.Category");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PowerSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarrantyPeriod")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Food", b =>
                {
                    b.HasBaseType("DevSkill.Inventory.Domain.Entities.Category");

                    b.Property<string>("ExpiryDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganicCertification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Categories", t =>
                        {
                            t.Property("Ingredients")
                                .HasColumnName("Food_Ingredients");
                        });

                    b.HasDiscriminator().HasValue(10);
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Furniture", b =>
                {
                    b.HasBaseType("DevSkill.Inventory.Domain.Entities.Category");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Categories", t =>
                        {
                            t.Property("Material")
                                .HasColumnName("Furniture_Material");
                        });

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Grocery", b =>
                {
                    b.HasBaseType("DevSkill.Inventory.Domain.Entities.Category");

                    b.Property<string>("ExpiryDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganicCertification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Categories", t =>
                        {
                            t.Property("ExpiryDate")
                                .HasColumnName("Grocery_ExpiryDate");

                            t.Property("OrganicCertification")
                                .HasColumnName("Grocery_OrganicCertification");

                            t.Property("StorageInstructions")
                                .HasColumnName("Grocery_StorageInstructions");
                        });

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Healthcare", b =>
                {
                    b.HasBaseType("DevSkill.Inventory.Domain.Entities.Category");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpiryDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrescriptionRequired")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Categories", t =>
                        {
                            t.Property("Brand")
                                .HasColumnName("Healthcare_Brand");

                            t.Property("ExpiryDate")
                                .HasColumnName("Healthcare_ExpiryDate");
                        });

                    b.HasDiscriminator().HasValue(15);
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.HomeAppliances", b =>
                {
                    b.HasBaseType("DevSkill.Inventory.Domain.Entities.Category");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnergyEfficiency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PowerRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarrantyPeriod")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Categories", t =>
                        {
                            t.Property("Brand")
                                .HasColumnName("HomeAppliances_Brand");

                            t.Property("WarrantyPeriod")
                                .HasColumnName("HomeAppliances_WarrantyPeriod");
                        });

                    b.HasDiscriminator().HasValue(11);
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Jewelry", b =>
                {
                    b.HasBaseType("DevSkill.Inventory.Domain.Entities.Category");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GemstoneType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Categories", t =>
                        {
                            t.Property("Brand")
                                .HasColumnName("Jewelry_Brand");

                            t.Property("Material")
                                .HasColumnName("Jewelry_Material");

                            t.Property("Size")
                                .HasColumnName("Jewelry_Size");
                        });

                    b.HasDiscriminator().HasValue(9);
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.OfficeSupplies", b =>
                {
                    b.HasBaseType("DevSkill.Inventory.Domain.Entities.Category");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsageType")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Categories", t =>
                        {
                            t.Property("Brand")
                                .HasColumnName("OfficeSupplies_Brand");

                            t.Property("Model")
                                .HasColumnName("OfficeSupplies_Model");

                            t.Property("Size")
                                .HasColumnName("OfficeSupplies_Size");
                        });

                    b.HasDiscriminator().HasValue(12);
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.PetSupplies", b =>
                {
                    b.HasBaseType("DevSkill.Inventory.Domain.Entities.Category");

                    b.Property<string>("AgeGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnimalType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Categories", t =>
                        {
                            t.Property("Material")
                                .HasColumnName("PetSupplies_Material");

                            t.Property("Size")
                                .HasColumnName("PetSupplies_Size");
                        });

                    b.HasDiscriminator().HasValue(13);
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.RealEstate", b =>
                {
                    b.HasBaseType("DevSkill.Inventory.Domain.Entities.Category");

                    b.Property<string>("Amenities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int?>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<bool>("HasGarden")
                        .HasColumnType("bit");

                    b.Property<bool>("HasParking")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFurnished")
                        .HasColumnType("bit");

                    b.Property<string>("ListingAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ListingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PropertyCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SizeInSquareFeet")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("YearBuilt")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(16);
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Sports", b =>
                {
                    b.HasBaseType("DevSkill.Inventory.Domain.Entities.Category");

                    b.Property<string>("EquipmentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SportType")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Toys", b =>
                {
                    b.HasBaseType("DevSkill.Inventory.Domain.Entities.Category");

                    b.Property<string>("AgeGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BatteryRequired")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Categories", t =>
                        {
                            t.Property("AgeGroup")
                                .HasColumnName("Toys_AgeGroup");

                            t.Property("Material")
                                .HasColumnName("Toys_Material");
                        });

                    b.HasDiscriminator().HasValue(7);
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.POSProduct", b =>
                {
                    b.HasOne("DevSkill.Inventory.Domain.Entities.POSTransaction", "POSTransaction")
                        .WithMany("POSProducts")
                        .HasForeignKey("POSTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevSkill.Inventory.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("POSTransaction");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Product", b =>
                {
                    b.HasOne("DevSkill.Inventory.Domain.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DevSkill.Inventory.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DevSkill.Inventory.Domain.Entities.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DevSkill.Inventory.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.ProductSupplier", b =>
                {
                    b.HasOne("DevSkill.Inventory.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("DevSkill.Inventory.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("DevSkill.Inventory.Domain.Entities.Supplier", null)
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("SupplierId1");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.ProductTag", b =>
                {
                    b.HasOne("DevSkill.Inventory.Domain.Entities.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("DevSkill.Inventory.Domain.Entities.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Purchase", b =>
                {
                    b.HasOne("DevSkill.Inventory.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.PurchaseProduct", b =>
                {
                    b.HasOne("DevSkill.Inventory.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevSkill.Inventory.Domain.Entities.Purchase", "Purchase")
                        .WithMany("PurchaseProducts")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.PurchaseReturn", b =>
                {
                    b.HasOne("DevSkill.Inventory.Domain.Entities.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.PurchaseReturnProduct", b =>
                {
                    b.HasOne("DevSkill.Inventory.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevSkill.Inventory.Domain.Entities.PurchaseReturn", "PurchaseReturn")
                        .WithMany("PurchaseReturnProducts")
                        .HasForeignKey("PurchaseReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseReturn");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.SaleProduct", b =>
                {
                    b.HasOne("DevSkill.Inventory.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevSkill.Inventory.Domain.Entities.Sale", "Sale")
                        .WithMany("SaleProducts")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.SalesReturn", b =>
                {
                    b.HasOne("DevSkill.Inventory.Domain.Entities.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.SalesReturnProduct", b =>
                {
                    b.HasOne("DevSkill.Inventory.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevSkill.Inventory.Domain.Entities.SalesReturn", "SalesReturn")
                        .WithMany("SalesReturnProducts")
                        .HasForeignKey("SalesReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesReturn");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.StockAdjustment", b =>
                {
                    b.HasOne("DevSkill.Inventory.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevSkill.Inventory.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.StockTransfer", b =>
                {
                    b.HasOne("DevSkill.Inventory.Domain.Entities.Warehouse", "FromWarehouse")
                        .WithMany()
                        .HasForeignKey("FromWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevSkill.Inventory.Domain.Entities.Warehouse", "ToWarehouse")
                        .WithMany()
                        .HasForeignKey("ToWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromWarehouse");

                    b.Navigation("ToWarehouse");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.StockTransferProduct", b =>
                {
                    b.HasOne("DevSkill.Inventory.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("DevSkill.Inventory.Domain.Entities.StockTransfer", "StockTransfer")
                        .WithMany("Products")
                        .HasForeignKey("StockTransferId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("StockTransfer");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.WarehouseProduct", b =>
                {
                    b.HasOne("DevSkill.Inventory.Domain.Entities.Product", "Product")
                        .WithMany("WarehouseProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevSkill.Inventory.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("WarehouseProducts")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Furniture", b =>
                {
                    b.OwnsOne("DevSkill.Inventory.Domain.Entities.Dimensions", "Dimensions", b1 =>
                        {
                            b1.Property<Guid>("FurnitureId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal?>("Height")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal?>("Length")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<Guid?>("MeasurementUnitId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal?>("Width")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("FurnitureId");

                            b1.HasIndex("MeasurementUnitId");

                            b1.ToTable("Categories");

                            b1.WithOwner()
                                .HasForeignKey("FurnitureId");

                            b1.HasOne("DevSkill.Inventory.Domain.Entities.MeasurementUnit", "MeasurementUnit")
                                .WithMany()
                                .HasForeignKey("MeasurementUnitId");

                            b1.Navigation("MeasurementUnit");
                        });

                    b.Navigation("Dimensions");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.POSTransaction", b =>
                {
                    b.Navigation("POSProducts");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductTags");

                    b.Navigation("WarehouseProducts");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Purchase", b =>
                {
                    b.Navigation("PurchaseProducts");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.PurchaseReturn", b =>
                {
                    b.Navigation("PurchaseReturnProducts");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Sale", b =>
                {
                    b.Navigation("SaleProducts");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.SalesReturn", b =>
                {
                    b.Navigation("SalesReturnProducts");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.StockTransfer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("ProductSuppliers");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Tag", b =>
                {
                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("DevSkill.Inventory.Domain.Entities.Warehouse", b =>
                {
                    b.Navigation("WarehouseProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
