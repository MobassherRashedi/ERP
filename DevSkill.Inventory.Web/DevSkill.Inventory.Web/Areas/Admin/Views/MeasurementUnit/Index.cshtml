@using Microsoft.AspNetCore.Antiforgery
@inject IAntiforgery antiforgery
@model MeasurementUnitModel

@{
    ViewData["Title"] = "Measurement Units";
}
@{
    var iconPath = Url.Content("~/adminlte/svg/icons.svg");
}
@section Styles
{
    <link rel="stylesheet" href="~/adminlte/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
    <link rel="stylesheet" href="~/adminlte/plugins/datatables-responsive/css/responsive.bootstrap4.min.css">
    <link rel="stylesheet" href="~/adminlte/plugins/datatables-buttons/css/buttons.bootstrap4.min.css">
    <link rel="stylesheet" href="~/adminlte/css/customStyle.css">
}
@section Scripts
{
    <script src="~/adminlte/plugins/datatables/jquery.dataTables.min.js"></script>
    <script src="~/adminlte/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
    <script src="~/adminlte/plugins/datatables-responsive/js/dataTables.responsive.min.js"></script>
    <script src="~/adminlte/plugins/datatables-responsive/js/responsive.bootstrap4.min.js"></script>
    <script src="~/adminlte/plugins/datatables-buttons/js/dataTables.buttons.min.js"></script>
    <script src="~/adminlte/plugins/datatables-buttons/js/buttons.bootstrap4.min.js"></script>
    <script src="~/adminlte/plugins/jszip/jszip.min.js"></script>
    <script src="~/adminlte/plugins/pdfmake/pdfmake.min.js"></script>
    <script src="~/adminlte/plugins/pdfmake/vfs_fonts.js"></script>
    <script src="~/adminlte/plugins/datatables-buttons/js/buttons.html5.min.js"></script>
    <script src="~/adminlte/plugins/datatables-buttons/js/buttons.print.min.js"></script>
    <script src="~/adminlte/plugins/datatables-buttons/js/buttons.colVis.min.js"></script>

    <script>
        $(function () {
            var table = $("#MeasurementUnit").DataTable({
                processing: true,
                serverSide: true,
                responsive: true,
                lengthChange: false, // Disable default length change
                searching: false, // Disable default search box
                autoWidth: false,
                lengthMenu: [
                    [10, 25, 50, -1],
                    [10, 25, 50, 'All']
                ],
                ajax: {
                    url: "/Admin/MeasurementUnit/GetMeasurementUnitsJsonData",
                    type: "POST",
                    contentType: "application/json",
                    dataType: "json",
                    data: function (d) {
                            d.Search = {
                                Value: $("#customSearchBox").val(),
                            };
                        return JSON.stringify(d);
                    },
                },
                columns: [
                    {
                        data: null,
                        width: '10%',
                        render: function (data, type, row) {
                            return `<input type="checkbox" class="row-select" data-id="${row[2]}">`;
                        },
                        searchable: false,
                        orderable: false
                    },
                    { data: 0, name: "UnitType", className: 'dt-center', width: '15%', searchable: true, orderable: true },
                    { data: 1, name: "UnitSymbol", className: 'dt-center', width: '30%', searchable: true, orderable: true },
                    { data: 3, name: "CreateDate", className: 'dt-center', width: '30%', searchable: true, orderable: true },
                    {
                        data: null,
                        className: 'dt-center',
                        width: '15%',
                        render: function (data, type, row) {
                            const id = row[2]; // Use ID from row data
                            return `
                                    <div style="display: flex; justify-content: center;">
                         <a href="#" onclick="openUpdateModal('${id}')" title="Edit MeasurementUnit">
                                                <svg style="width: 47px; height: 47px; padding:0px;">
                                                    <use xlink:href="@iconPath#icon-edit"></use>
                                                </svg>
                                            </a>
                                                    <a href="#" class="show-bs-modal" data-id='${id}' title="Delete MeasurementUnit">
                                                <svg style="width: 45px; height: 45px;">
                                                    <use xlink:href="@iconPath#icon-delete"></use>
                                                </svg>
                                            </a>
                                            </div>
                                `;
                        },
                        searchable: false,
                        orderable: false
                    }
                ],
                order: [1, 'asc'],
                dom: '<"row"<"col-sm-12 col-md-6"lB>>' +
                    '<"row"<"col-sm-12"tr>>' +
                    '<"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>',

                buttons: [
                    { extend: 'csv', text: 'CSV', className: 'dropdown-item' },
                    { extend: 'excel', text: 'Excel', className: 'dropdown-item' },
                    { extend: 'pdf', text: 'PDF', className: 'dropdown-item' },
                ] ,  language: {
                    paginate: {
                        previous: '<',  // Left arrow for "Previous"
                        next: '>'       // Right arrow for "Next"
                    }
                }
            });

            // Custom search box handling
            $('#customSearchBox').on('input', function () {
                console.log('Searching for: ', this.value);
                table.ajax.reload();
            });

            // Append DataTable buttons to dropdown
            table.buttons().container().appendTo('#dataTableExport .dropdown-menu');
            table.buttons().container().appendTo('#dataTableExport');

                // Handle the create measurement unit form submission
                $('#createMeasurementUnitForm').on('submit', function (e) {
                    e.preventDefault();

                    // Prepare form data
                    var formData = {
                        UnitType: $("#UnitType").val(),
                        UnitSymbol: $("#UnitSymbol").val()
                    };
                    console.log('Payload being sent:', formData); // Debug log

                    // Get the anti-forgery token
                    var token = $('input[name="__RequestVerificationToken"]').val();

                    // Make the AJAX POST request
                    $.ajax({
                        url: '/Admin/MeasurementUnit/CreateJson', // Adjust the URL according to your routing
                        type: 'POST',
                        contentType: 'application/json',
                        headers: {
                            'RequestVerificationToken': token // Pass the anti-forgery token
                        },
                        data: JSON.stringify(formData), // Send form data as JSON
                        success: function (response) {
                            if (response.success) {
                                $('#createMeasurementUnitModal').modal('hide'); // Hide the modal after success
                                $('#createMeasurementUnitForm')[0].reset(); // Reset the form

                                // Reload the DataTable
                                $('#MeasurementUnit').DataTable().ajax.reload();

                                // Show success message
                                $('#alert')
                                    .removeClass('alert-danger')
                                    .addClass('alert-success') // Set success class
                                    .text(response.message) // Set the success message
                                    .fadeIn('slow'); // Fade in the alert

                                // Auto-dismiss the alert after 2 seconds
                                setTimeout(function () {
                                    $('#alert').fadeOut('slow'); // Fade out the alert
                                }, 2000); // 2000 milliseconds = 2 seconds
                            } else {
                                // Show error if server response indicates failure
                                alert('Error: ' + response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error creating measurement unit:', error); // Log the error
                            alert('Error creating measurement unit: ' + xhr.responseText); // Optional error message
                        }
                    });
                });


            // Delete confirmation modal for individual records
            $('#MeasurementUnit').on('click', '.show-bs-modal', function () {
                let id = $(this).data("id");
                let modal = $("#modal-default");
                modal.find('.modal-body p').text('Are you sure you want to delete this record?');
                $("#deleteId").val(id);
                $("#deleteForm").attr("action", "/admin/measurementunit/delete");
                modal.modal('show');
            });
            $("#deleteButton").click(function () {
                $("#deleteForm").submit();
            });


            window.openUpdateModal = function (id) {
                $.ajax({
                    url: '/Admin/MeasurementUnit/GetMeasurementUnit',
                    type: 'GET',
                    data: { id: id },
                    success: function (data) {
                        $('#unitId').val(data.id);
                        $('#unitType').val(data.unitType);
                        $('#unitSymbol').val(data.unitSymbol);
                        $('#updateModal').modal('show');
                    },
                    error: function () {
                        alert('Failed to fetch measurement unit data.');
                    }
                });
            }
            $('#updateForm').on('submit', function (e) {
                e.preventDefault();

                // Get the form data as an object
                const formData = {
                    Id: $('#unitId').val(),
                    unitType: $('#unitType').val(),
                    unitSymbol: $('#unitSymbol').val(),
                };

                // Get the anti-forgery token
                var token = $('input[name="__RequestVerificationToken"]').val();

                $.ajax({
                    url: '/Admin/MeasurementUnit/Update', // Ensure your URL is correct
                    type: 'POST',
                    contentType: 'application/json',
                    headers: {
                        'RequestVerificationToken': token
                    },
                    data: JSON.stringify(formData), // Convert formData to JSON
                    success: function (response) {
                        if (response.success) {
                            $('#MeasurementUnit').DataTable().ajax.reload(); // Reload DataTable
                            $('#updateModal').modal('hide');
                        } else {
                            alert(response.message); // Show error message
                        }
                    },
                    error: function () {
                        alert('Failed to update measurement unit.');
                    }
                });
            });




            $(document).ready(function () {
                var selectedIds = []; // Array to store selected product IDs

                // Handle "Select All" checkbox
                $('#selectAll').on('change', function () {
                    var isChecked = this.checked;
                    $('.row-select').each(function () {
                        $(this).prop('checked', isChecked);
                        toggleSelection($(this).data('id'), isChecked); // Update selectedIds array
                    });
                    toggleBulkDeleteButton();
                });

                // Event delegation for dynamically added checkboxes
                $(document).on('change', '.row-select', function () {
                    var id = $(this).data('id');
                    toggleSelection(id, $(this).prop('checked')); // Update selectedIds array

                    // If any checkbox is unchecked, uncheck "Select All"
                    if (!$(this).prop('checked')) {
                        $('#selectAll').prop('checked', false);
                    }

                    // If all checkboxes on the current page are checked, check "Select All"
                    if ($('.row-select:checked').length === $('.row-select').length) {
                        $('#selectAll').prop('checked', true);
                    }

                    // Show or hide the bulk delete button
                    toggleBulkDeleteButton();
                });

                // Show or hide the bulk delete button based on selections
                function toggleBulkDeleteButton() {
                    $('#bulkDeleteContainer').toggle(selectedIds.length > 0);
                }

                // Function to add or remove ID from selectedIds array
                function toggleSelection(id, isSelected) {
                    if (isSelected) {
                        if (!selectedIds.includes(id)) selectedIds.push(id);
                    } else {
                        selectedIds = selectedIds.filter(selectedId => selectedId !== id);
                    }
                }

                // Bulk delete modal trigger and collect IDs
                $('#bulkDelete').on('click', function () {
                    if (selectedIds.length > 0) {
                        $('#deleteIds').val(selectedIds.join(',')); // Set the hidden input in the modal with selected IDs
                        $('#BulkDelete').modal('show'); // Show the delete confirmation modal
                    } else {
                        alert('No measurement unit selected for deletion.');
                    }
                });

                // Handle the delete button inside the modal
                $('#bulkDeleteButton').on('click', function () {
                    var deleteIds = $('#deleteIds').val();
                    if (deleteIds) {
                        $('#bulkDeleteForm').submit(); // Submit the form with selected IDs for deletion
                    } else {
                        alert('No measurement unit selected for deletion.');
                    }
                });

                // Preserve checkbox selections on page change
                $('#yourTableId').on('draw.dt', function () {
                    $('.row-select').each(function () {
                        var id = $(this).data('id');
                        $(this).prop('checked', selectedIds.includes(id));
                    });

                    // Set "Select All" checkbox based on current page selections
                    $('#selectAll').prop('checked', $('.row-select:checked').length === $('.row-select').length);
                });
            });
        });
    </script>

}

<!-- Content Header (Page header) -->
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>All Measurement Units</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="#">Home</a></li>
                    <li class="breadcrumb-item active">Measurement Units</li>
                </ol>
            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>

<!-- Main content -->
<section class="content">
    <div class="container-fluid">
        <!-- Measurement Unit Table -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <div class="btn-group">
                            <input type="text" id="customSearchBox" class="form-control form-control-sm" placeholder="Search...">
                        </div>
                        
                        <div class="card-tools">
                            <!-- New Measurement Unit Button -->
                            <div class="btn-group" style="display: none;" id="bulkDeleteContainer">
                                <button id="bulkDelete" class="btn btn-danger btn-sm" data-toggle="modal" data-target="#BulkDelete">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                          
                            <!-- Export buttons dropdown -->
                            <div class="btn-group">
                                <button type="button" class="btn btn-sucess btn-sm dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                                    Export <i class="fas fa-cog"></i>
                                </button>
                                <div id="dataTableExport" class="dropdown-menu" role="menu">
                                    <!-- DataTable buttons will be appended here dynamically -->
                                </div>
                            </div>
                            <!-- Custom length menu dropdown -->
                            <div class="btn-group">
                                <button type="button" class="btn btn-info btn-sm dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                                    Show <span class="items-count">10</span>
                                </button>
                                <div class="dropdown-menu" role="menu">
                                    <a class="dropdown-item" href="#" onclick="$('#MeasurementUnit').DataTable().page.len(10).draw(); $('.items-count').text('10');">10</a>
                                    <a class="dropdown-item" href="#" onclick="$('#MeasurementUnit').DataTable().page.len(25).draw(); $('.items-count').text('25');">25</a>
                                    <a class="dropdown-item" href="#" onclick="$('#MeasurementUnit').DataTable().page.len(50).draw(); $('.items-count').text('50');">50</a>
                                    <a class="dropdown-item" href="#" onclick="$('#MeasurementUnit').DataTable().page.len(-1).draw(); $('.items-count').text('All');">All</a>
                                </div>
                            </div>
                            <div class="btn-group">
                                <a href="#" class="btn btn-primary-cs btn-sm" data-toggle="modal" data-target="#createMeasurementUnitModal">
                                    <i class="fas fa-plus"></i> New
                                </a>
                            </div>
                        </div>
                    </div>

                    <!-- /.card-header -->
                    <div class="card-body">
                        <partial name="_ResponsePartial" />
                        <partial name="_ModalPartial" />
                        <table id="MeasurementUnit" class="table table-striped">
                            <thead>
                                <tr>
                                    <th><input type="checkbox" id="selectAll" /></th>
                                    <th>Unit Type</th>
                                    <th>Unit Symbol</th>
                                    <th>Create Date</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
            <!-- /.col -->
        </div>
        <!-- /.row -->
    </div>
    <!-- /.container-fluid -->
</section>
<!-- /.content -->
<!-- Create Measurement Unit Modal -->
<div class="modal fade" id="createMeasurementUnitModal" tabindex="-1" role="dialog" aria-labelledby="createMeasurementUnitModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createMeasurementUnitModalLabel">Create New Measurement Unit</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="createMeasurementUnitForm">
                    @Html.AntiForgeryToken()
                    <label asp-for="UnitType"></label>
                    <input type="text" asp-for="UnitType" class="form-control" />
                    <span asp-validation-for="UnitType" class="text-danger"></span>

                    <label asp-for="UnitSymbol"></label>
                    <input type="text" asp-for="UnitSymbol" class="form-control" />
                    <span asp-validation-for="UnitSymbol" class="text-danger"></span>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Create Unit</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Update Measurement Unit Modal -->
<div class="modal fade" id="updateModal" tabindex="-1" role="dialog" aria-labelledby="updateModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <form id="updateForm">
                <div class="modal-header">
                    <h5 class="modal-title" id="updateModalLabel">Update Measurement Unit</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="unitId" name="Id" />
                    <div class="form-group">
                        <label for="unitType">Unit Type</label>
                        <input type="text" class="form-control" id="unitType" name="unitType" required />
                    </div>
                    <div class="form-group">
                        <label for="unitSymbol">Unit Symbol</label>
                        <input type="text" class="form-control" id="unitSymbol" name="unitSymbol" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Bulk Delete Measurement Unit Modal -->
<div class="modal fade" id="BulkDelete">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Delete</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the selected measurement units?</p>
                <form id="bulkDeleteForm" action="/Admin/MeasurementUnit/BulkDelete" method="post" asp-antiforgery="true" area="Admin">
                    <!-- Hidden input to store the list of selected IDs -->
                    <input type="hidden" id="deleteIds" name="ids" />
                </form>
            </div>
            <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" id="bulkDeleteButton" class="btn btn-danger">Yes, Delete!</button>
            </div>
        </div>
    </div>
</div>
