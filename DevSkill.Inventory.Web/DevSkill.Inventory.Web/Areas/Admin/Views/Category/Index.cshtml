@using Microsoft.AspNetCore.Antiforgery
@inject IAntiforgery antiforgery
@model CategoryModel
@{
    ViewData["Title"] = "All Categories";
}
@{
    var iconPath = Url.Content("~/adminlte/svg/icons.svg");
}
@section Styles
{
    <link rel="stylesheet" href="~/adminlte/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
    <link rel="stylesheet" href="~/adminlte/plugins/datatables-responsive/css/responsive.bootstrap4.min.css">
    <link rel="stylesheet" href="~/adminlte/plugins/datatables-buttons/css/buttons.bootstrap4.min.css">
    <link rel="stylesheet" href="~/adminlte/css/customStyle.css">

}

@section Scripts
{
    <script src="~/adminlte/plugins/datatables/jquery.dataTables.min.js"></script>
    <script src="~/adminlte/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
    <script src="~/adminlte/plugins/datatables-responsive/js/dataTables.responsive.min.js"></script>
    <script src="~/adminlte/plugins/datatables-responsive/js/responsive.bootstrap4.min.js"></script>
    <script src="~/adminlte/plugins/datatables-buttons/js/dataTables.buttons.min.js"></script>
    <script src="~/adminlte/plugins/datatables-buttons/js/buttons.bootstrap4.min.js"></script>
    <script src="~/adminlte/plugins/jszip/jszip.min.js"></script>
    <script src="~/adminlte/plugins/pdfmake/pdfmake.min.js"></script>
    <script src="~/adminlte/plugins/pdfmake/vfs_fonts.js"></script>
    <script src="~/adminlte/plugins/datatables-buttons/js/buttons.html5.min.js"></script>
    <script src="~/adminlte/plugins/datatables-buttons/js/buttons.print.min.js"></script>
    <script src="~/adminlte/plugins/datatables-buttons/js/buttons.colVis.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>

        function handleAjaxError(xhr, status, error) {
            if (xhr.status === 403) {
                // Handle access denied
                console.error('Access denied:', xhr.responseText);
                Swal.fire({
                    icon: 'error',
                    title: 'Access Denied',
                    text: 'You do not have permission to perform this action.',
                });
            } else {
                // Handle other errors
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'An error occurred',
                    text: xhr.responseText || 'Something went wrong, please try again later.',
                });
            }
        }

    </script>

    <script>
        $(function () {
            var table = $("#category").DataTable({
                processing: true,
                serverSide: true,
                responsive: true,
                lengthChange: false, // Disable default length change
                searching: false, // Disable default search box
                autoWidth: false,
                lengthMenu: [
                    [10, 25, 50, -1],
                    [10, 25, 50, 'All']
                ],
                language: {
                    paginate: {
                        first: '<i class="fas fa-angle-double-left"></i>',  // FontAwesome icon for first
                        previous: '<i class="fas fa-angle-left"></i>',      // FontAwesome icon for previous
                        next: '<i class="fas fa-angle-right"></i>',         // FontAwesome icon for next
                        last: '<i class="fas fa-angle-double-right"></i>'   // FontAwesome icon for last
                    }
                },
                ajax: {
                    url: "/Admin/Category/GetCategoriesJsonData",
                    type: "POST",
                    contentType: "application/json",
                    dataType: "json",
                    data: function (d) {

                        d.Search = {
                            Value: $("#customSearchBox").val(),
                        };
                        return JSON.stringify(d);
                    },
                },
                columns: [
                    {
                        data: null,
                        width: '10%',
                        render: function (data, type, row) {
                            return `<input type="checkbox" class="row-select" data-id="${row[2]}">`; // Use row[2] for the ID
                        },
                        searchable: false,
                        orderable: false
                    },
                    { data: 0, name: "Title", className: 'dt-center', width: '40%', searchable: true, orderable: true },
                    { data: 1, name: "CreateDate", className: 'dt-center', width: '35%', searchable: true, orderable: true },
                    {
                        data: null,
                        className: 'dt-center',
                        width: '15%',
                        render: function (data, type, row) {
                            const id = row[2]; // Use the ID from the row data
                            return `
                                    <div style="display: flex; justify-content: center;">
                                    <a href="#" onclick="fetchCategory('${id}')" title="Edit Category">
                                        <svg style="width: 47px; height: 47px; padding:0px;">
                                            <use xlink:href="@iconPath#icon-edit"></use>
                                        </svg>
                                    </a>
                                    <a href="#" class="show-bs-modal" data-id='${id}' title="Delete Category">
                                        <svg style="width: 45px; height: 45px;">
                                            <use xlink:href="@iconPath#icon-delete"></use>
                                        </svg>
                                    </a>
                                    </div>
                            `;
                        },
                        searchable: false,
                        orderable: false
                    }
                ],
                order: [1, 'asc'],
                dom: '<"row"<"col-sm-12 col-md-6"lB>>' +
                    '<"row"<"col-sm-12"tr>>' +
                    '<"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>',

                buttons: [
                    { extend: 'csv', text: 'CSV', className: 'dropdown-item btn-default', },
                    { extend: 'excel', text: 'Excel', className: 'dropdown-item btn-default', },
                    { extend: 'pdf', text: 'PDF', className: 'dropdown-item btn-default', },
                ],
                language: {
                    paginate: {
                        previous: '<',  // Left arrow for "Previous"
                        next: '>'       // Right arrow for "Next"
                    }
                }
            });

            $('#customSearchBox').on('input', function () {
                console.log('Searching for: ', this.value); // Log the input value
                //table.search(this.value).draw();
                table.ajax.reload();
            });

            // Append DataTable buttons to dropdown
            table.buttons().container().appendTo('#dataTableExport .dropdown-menu');
            // Move DataTable buttons to dropdown
            table.buttons().container().appendTo('#dataTableExport');

            $('#category').on('click', '.show-bs-modal', function (event) {
                let id = $(this).data("id");
                let modal = $("#modal-default");
                modal.find('.modal-body p').text('Are you sure you want to delete this record?');
                $("#deleteId").val(id);
                $("#deleteForm").attr("action", "/admin/category/delete");
                modal.modal('show');
            });
            // Function to open update modal and populate fields
            window.fetchCategory = function (id) {
                $.ajax({
                    url: `/Admin/Category/UpdateJson/${id}`, // Adjust the URL according to your routing
                    type: 'GET',
                    success: function (response) {
                        // Assuming the response contains the category data
                        $("#updateId").val(response.id); // Set the ID of the category
                        $("#updateTitle").val(response.title); // Set the Title of the category
                        $("#updateDescription").val(response.description); // Set the Description (optional)

                        // Show the modal
                        $("#updateCategoryModal").modal('show');
                    },
                    error: function (xhr, status, error) {
                        handleAjaxError(xhr, status, error);
                    }
                });
            };

            // Handle update category form submission
            $('#updateCategoryForm').on('submit', function (e) {
                e.preventDefault();

                // Prepare form data including dynamic attributes (if any)
                var formData = {
                    Id: $("#updateId").val(),
                    Title: $("#updateTitle").val(),
                    Description: $("#updateDescription").val(), // Include the description field

                };

                
                // Add anti-forgery token to headers
                var token = $('input[name="__RequestVerificationToken"]').val();

                $.ajax({
                    url: `/Admin/Category/UpdateJson/${$("#updateId").val()}`, // The URL for updating the category
                    type: 'POST',
                    contentType: 'application/json',
                    headers: {
                        'RequestVerificationToken': token
                    },
                    data: JSON.stringify(formData), // Send the complete form data (including DynamicAttributes if applicable)
                    success: function (response) {
                        if (response.success) {
                            $('#category').DataTable().ajax.reload(); // Reload DataTable to reflect changes
                            $('#updateCategoryModal').modal('hide');  // Hide the update modal
                            window.location.href = "/Admin/Category/Index"; // Redirect to the category index page
                        } else {
                            alert('Error updating category: ' + response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error updating category:', error);
                        alert('Error updating category: ' + xhr.responseText); // Optional error message
                    }
                });
            });



            $("#deleteButton").click(function () {
                $("#deleteForm").submit();
            });


            $(document).ready(function () {
                var selectedIds = []; // Array to store selected product IDs

                // Handle "Select All" checkbox
                $('#selectAll').on('change', function () {
                    var isChecked = this.checked;
                    $('.row-select').each(function () {
                        $(this).prop('checked', isChecked);
                        toggleSelection($(this).data('id'), isChecked); // Update selectedIds array
                    });
                    toggleBulkDeleteButton();
                });

                // Event delegation for dynamically added checkboxes
                $(document).on('change', '.row-select', function () {
                    var id = $(this).data('id');
                    toggleSelection(id, $(this).prop('checked')); // Update selectedIds array

                    // If any checkbox is unchecked, uncheck "Select All"
                    if (!$(this).prop('checked')) {
                        $('#selectAll').prop('checked', false);
                    }

                    // If all checkboxes on the current page are checked, check "Select All"
                    if ($('.row-select:checked').length === $('.row-select').length) {
                        $('#selectAll').prop('checked', true);
                    }

                    // Show or hide the bulk delete button
                    toggleBulkDeleteButton();
                });

                // Show or hide the bulk delete button based on selections
                function toggleBulkDeleteButton() {
                    $('#bulkDeleteContainer').toggle(selectedIds.length > 0);
                }

                // Function to add or remove ID from selectedIds array
                function toggleSelection(id, isSelected) {
                    if (isSelected) {
                        if (!selectedIds.includes(id)) selectedIds.push(id);
                    } else {
                        selectedIds = selectedIds.filter(selectedId => selectedId !== id);
                    }
                }

                // Bulk delete modal trigger and collect IDs
                $('#bulkDelete').on('click', function () {
                    if (selectedIds.length > 0) {
                        $('#deleteIds').val(selectedIds.join(',')); // Set the hidden input in the modal with selected IDs
                        $('#BulkDelete').modal('show'); // Show the delete confirmation modal
                    } else {
                        alert('No category selected for deletion.');
                    }
                });

                // Handle the delete button inside the modal
                $('#bulkDeleteButton').on('click', function () {
                    var deleteIds = $('#deleteIds').val();
                    if (deleteIds) {
                        $('#bulkDeleteForm').submit(); // Submit the form with selected IDs for deletion
                    } else {
                        alert('No category selected for deletion.');
                    }
                });

                // Preserve checkbox selections on page change
                $('#category').on('draw.dt', function () {
                    $('.row-select').each(function () {
                        var id = $(this).data('id');
                        $(this).prop('checked', selectedIds.includes(id));
                    });

                    // Set "Select All" checkbox based on current page selections
                    $('#selectAll').prop('checked', $('.row-select:checked').length === $('.row-select').length);
                });
            });


        });
    </script>

    <script>
        let createAttributeIndex = 0;  // Track the index for dynamic attributes in the create modal

        // Function to add dynamic attribute for create modal
        function addDynamicAttribute() {
            const dynamicAttributesContainer = document.getElementById('createDynamicAttributesContainer');

            const attributeDiv = document.createElement('div');
            attributeDiv.classList.add('form-group');
            attributeDiv.innerHTML = `
                    <div class="row">
                        <div class="col-md-5">
                            <input type="text" class="form-control" name="createDynamicAttributes[${createAttributeIndex}].Name" placeholder="Attribute Name" required />
                        </div>
                        <div class="col-md-5">
                            <input type="text" class="form-control" name="createDynamicAttributes[${createAttributeIndex}].Value" placeholder="Attribute Value" />
                        </div>
                        <div class="col-md-2">
                            <button type="button" class="btn btn-danger" onclick="removeDynamicAttribute(this)">Remove</button>
                        </div>
                    </div>
                `;
            dynamicAttributesContainer.appendChild(attributeDiv);

            // Increment the index for the next dynamic attribute
            createAttributeIndex++;
        }

        // Function to remove dynamic attribute
        function removeDynamicAttribute(button) {
            const attributeDiv = button.closest('.form-group');
            attributeDiv.remove();
        }

        // Show or hide dynamic attributes based on the selected category type
        $(document).ready(function () {
            $('#createCategoryType').change(function () {
                const selectedType = $(this).val();
                const dynamicAttributesDiv = document.getElementById('createDynamicAttributesDiv');
                const showDynamicAttributes = selectedType === 'Others';
                dynamicAttributesDiv.style.display = showDynamicAttributes ? 'block' : 'none';
            });
        });

        // Handle the create category form submission
        $('#createCategoryForm').on('submit', function (e) {
            e.preventDefault();

            // Create an object to hold the form data
            var formData = {
                Title: $("#Title").val(),
                CategoryType: $("#createCategoryType").val(),  // Get the selected CategoryType
                Description: $("#Description").val(),
                DynamicAttributes: []  // Initialize an empty array for dynamic attributes
            };

            // Collect dynamic attributes if the category type is 'Others'
            if (formData.CategoryType === 'Others') {
                $('input[name^="createDynamicAttributes"]').each(function () {
                    var name = $(this).attr('name');
                    var value = $(this).val();
                    if (name.includes('Name')) {
                        var index = name.split('[')[1].split(']')[0]; // Extract the index from the name
                        formData.DynamicAttributes.push({
                            Name: value,
                            Value: $('input[name="createDynamicAttributes[' + index + '].Value"]').val()
                        });
                    }
                });
            }

            // If no dynamic attributes were added, leave the array empty or don't send the field
            if (formData.DynamicAttributes.length === 0) {
                delete formData.DynamicAttributes;  // Remove DynamicAttributes from the payload if empty
            }

            // Log the payload for debugging purposes
            console.table('Payload being sent:', formData);
            console.log(JSON.stringify(formData));

            // Get the CSRF token
            var token = $('input[name="__RequestVerificationToken"]').val();

            // Make the AJAX request
            $.ajax({
                url: '/Admin/Category/CreateJson',
                type: 'POST',
                contentType: 'application/json',
                headers: {
                    'RequestVerificationToken': token
                },
                data: JSON.stringify(formData),  // Send the JSON payload
                success: function (response) {
                    if (response.success) {
                        $('#createCategoryModal').modal('hide');
                        $('#createCategoryForm')[0].reset();
                        window.location.href = "/Admin/Category/Index";
                    } else {
                        alert('Error: ' + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    handleAjaxError(xhr, status, error);
                }
            });
        });
    </script>




}

<!-- Content Header (Page header) -->
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>All Categories</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="#">Home</a></li>
                    <li class="breadcrumb-item active">All Categories</li>
                </ol>
            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>

<!-- Main content -->

<section class="content">
<div class="container-fluid">
       <!-- Category Table -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                <div class="card-header">
                        <div class="btn-group">
                            <input type="text" id="customSearchBox" class="form-control form-control-sm" placeholder="Search...">
                        </div>
                       
                    <div class="card-tools">
                            <div class="btn-group" style="display: none;" id="bulkDeleteContainer">
                                <button id="bulkDelete" class="btn btn-danger btn-sm" data-toggle="modal" data-target="#BulkDelete">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        <!-- New button -->

                        <!-- Export buttons dropdown -->
                        <div class="btn-group">
                            <button type="button" class="btn  btn-sucess btn-sm dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                                Export <i class="fas fa-cog"></i>
                            </button>
                            <div id="dataTableExport" class="dropdown-menu" role="menu">
                                <!-- DataTable buttons will be appended here dynamically -->
                            </div>
                        </div>
                        <!-- Custom length menu dropdown -->
                        <div class="btn-group">
                            <button type="button" class="btn btn-info btn-sm dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                                Show <span class="items-count">10</span>
                            </button>
                            <div class="dropdown-menu" role="menu">
                                <a class="dropdown-item" href="#" onclick="$('#category').DataTable().page.len(10).draw(); $('.items-count').text('10');">10</a>
                                <a class="dropdown-item" href="#" onclick="$('#category').DataTable().page.len(25).draw(); $('.items-count').text('25');">25</a>
                                <a class="dropdown-item" href="#" onclick="$('#category').DataTable().page.len(50).draw(); $('.items-count').text('50');">50</a>
                                <a class="dropdown-item" href="#" onclick="$('#category').DataTable().page.len(-1).draw(); $('.items-count').text('All');">All</a>
                            </div>
                        </div>
                            <div class="btn-group">
                                <a href="#" class="btn btn-primary-cs btn-sm" data-toggle="modal" data-target="#createCategoryModal">
                                    <i class="fas fa-plus"></i> New
                                </a>
                            </div>
                    </div>
                
                </div>

                    <!-- /.card-header -->
                    <div class="card-body" >
                        <partial name="_ResponsePartial" />
                        <partial name="_ModalPartial" />
                        <table id="category" class="table table-striped">
                            <thead>
                                <tr>
                                    <th><input type="checkbox" id="selectAll" /></th>
                                    <th>Title</th>
                                    <th>CreateDate</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
        </div>
    </div><!-- /.container-fluid -->
</div><!-- /.container-fluid -->
</section><!-- /.content -->
<!-- Create Category Modal -->
<div class="modal fade" id="createCategoryModal" tabindex="-1" role="dialog" aria-labelledby="createCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createCategoryModalLabel">Create New Category</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="createCategoryForm" method="post">
                    @Html.AntiForgeryToken()

                    <!-- Title -->
                    <div class="form-group">
                        <label asp-for="Title" class="col-form-label">Category Title</label>
                        <input type="text" asp-for="Title" class="form-control" />
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>

                    <!-- Description -->
                    <div class="form-group">
                        <label asp-for="Description" class="col-form-label">Description (Optional)</label>
                        <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>

                    <!-- Category Type -->
                    <div class="form-group">
                        <label asp-for="CategoryType" class="col-form-label">Category Type</label>
                        <select asp-for="CategoryType" class="form-control" id="createCategoryType">
                            @foreach (var categoryType in Enum.GetValues(typeof(DevSkill.Inventory.Domain.Entities.CategoryType)).Cast<DevSkill.Inventory.Domain.Entities.CategoryType>())
                            {
                                <option value="@categoryType">@categoryType.ToString()</option>
                            }
                        </select>
                        <span asp-validation-for="CategoryType" class="text-danger"></span>
                    </div>

                    <!-- Dynamic Attributes for 'Others' Category Type -->
                    <div class="form-group" id="createDynamicAttributesDiv" style="display:none;">
                        <h6>Dynamic Attributes</h6>
                        <div id="createDynamicAttributesContainer">
                            <!-- Dynamically added attributes will go here -->
                        </div>
                        <button type="button" class="btn btn-secondary" onclick="addDynamicAttribute()">Add Attribute</button>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Create Category</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


<!-- Update Category Modal -->
<div class="modal fade" id="updateCategoryModal" tabindex="-1" role="dialog" aria-labelledby="updateCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updateCategoryModalLabel">Update Category</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="updateCategoryForm" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" asp-for="Id" id="updateId" />

                    <!-- Title -->
                    <div class="form-group">
                        <label asp-for="Title" class="col-form-label">Category Title</label>
                        <input type="text" asp-for="Title" class="form-control" id="updateTitle" />
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>

                    <!-- Description -->
                    <div class="form-group">
                        <label asp-for="Description" class="col-form-label">Description (Optional)</label>
                        <textarea asp-for="Description" class="form-control" rows="3" id="updateDescription"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Update Category</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


<!-- Bulk Delete Warehouse Modal -->
<div class="modal fade" id="BulkDelete">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Delete</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the selected categories?</p>
                <form id="bulkDeleteForm" action="/Admin/Category/BulkDelete" method="post" asp-antiforgery="true" area="Admin">
                    <!-- Hidden input to store the list of selected IDs -->
                    <input type="hidden" id="deleteIds" name="ids" />
                </form>

            </div>
            <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" id="bulkDeleteButton" class="btn btn-danger">Yes, Delete!</button>
            </div>
        </div>
    </div>
</div>